services:
  # Zookeeper (necessario per Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
    networks:
      - iot-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka (il nostro hub centrale)
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - iot-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:29092"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Mosquitto (MQTT Broker)
  mosquitto:
    image: eclipse-mosquitto:2.0
    container_name: mosquitto
    ports:
      - "1883:1883"
    volumes:
      - ./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf:ro
      - mosquitto-data:/mosquitto/data
    networks:
      - iot-network
    healthcheck:
      test: ["CMD", "mosquitto_pub", "-h", "localhost", "-t", "test", "-m", "health_check", "-q", "1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Config Service (con PERSISTENT STORAGE tramite volume Docker)
  config-service:
    build: ./config-service
    container_name: config-service
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock 
      - ./templates/xml:/app/templates/xml:ro
      - ./templates/json:/app/templates/json
      # ✅ SEMPLIFICATO: Parser integrato nel config-service
    networks:
      - iot-network

  # Kafka-MQTT Bridge personalizzato
  kafka-mqtt-bridge:
    build: ./kafka-mqtt-bridge
    container_name: kafka-mqtt-bridge
    depends_on:
      kafka:
        condition: service_healthy
      mosquitto:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      MQTT_HOST: mosquitto
      MQTT_PORT: 1883
    networks:
      - iot-network
    restart: unless-stopped

  # Kafka UI per monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      DYNAMIC_CONFIG_ENABLED: 'true'
    networks:
      - iot-network

volumes:
  zookeeper-data:
  kafka-data:
  mosquitto-data:
  iot-templates-json:  # ✅ Volume Docker per file JSON

networks:
  iot-network:
    driver: bridge
